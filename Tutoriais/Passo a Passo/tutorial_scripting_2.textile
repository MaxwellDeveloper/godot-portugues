h1. Programando (Continuação)

h2. Processando

Algumas ações na Godot são iniciadas por _callbacks_ ou funções virtuais, então não há necessidade de escrever códigos que ficam rodando o tempo todo. Além disso, muito pode ser feito com reprodutores de animações.

Contudo, ainda é um caso comum precisar de um script que rode a cada frame. Há dois tipos de processamento: em inatividade (_idle processing_) e fixo (_fixed processing_).

Processamento em inatividade é habilitado com a função "@Node.set_process()@":https://github.com/okamstudio/godot/wiki/class_node#set_process. Uma vez habilitado, o callback "@Node._process()@":https://github.com/okamstudio/godot/wiki/class_node#_process será chamado a cada frame. Exemplo:

<pre><code class="python">
func _ready():
	set_process(true)

func _process(delta):
	#do something..
</code></pre>

O parâmetro @delta@ descreve o tempo passado (em segundos, como ponto flutuante) desde a última chamada a @_process()@. O processamento fixo é similar, porém apenas necessário para sincronização com o motor de física.

Uma maneira simples para testar isso é criar uma cena com apenas um nó _Label_, com o seguinte código:

<pre><code class="python">
extends Label

var accum=0

func _ready():
	set_process(true)

func _process(delta):
	accum+=delta
	set_text(str(accum))

</code></pre>

Que então irá mostrar um contador aumentando a cada segundo.

h2. Grupos

Nós podem ser adicionados a grupos (a tantos quanto for desejado por nó). Este é um recurso simples porém muito útil para organizar cenas grandes. Há duas maneiras de fazer isso, sendo a primeira a partir da interface gráfica, no botão _Groups_ (Grupos):

p=. !http://godotengine.org/attachments/103/download!

E a segunda forma é por código. Um exemplo útil seria marcar quais cenas são inimigos:

<pre><code class="python">
func _ready():
	add_to_group("enemies")
</code></pre>

Desta forma, se o jogador, enquanto entra sorrateiramente na base secreta, for descoberto, todos os inimigos podem ser alertados sobre o alarme, a partir do uso da função "@SceneTree.call_group()@":https://github.com/okamstudio/godot/wiki/class_scenemainloop#call_group:

<pre><code class="python">
func _on_discovered():
	get_tree().call_group(0,"guards","player_was_discovered")
</code></pre>

O código acima chama a função @player_was_discovered@ em cada membro do grupo "guards".

Opcionalmente, é possível obter uma lista completa dos nós no grupo "guards" com a função "@SceneTree.get_nodes_in_group()@":https://github.com/okamstudio/godot/wiki/class_scenemainloop#get_nodes_in_group:

<pre><code class="python">
var guards = get_tree().get_nodes_in_group("guards")
</code></pre>

Mais será dito sobre a class "SceneTree":https://github.com/okamstudio/godot/wiki/class_scenemainloop em um [[Árvore da Cena|próximo tutorial]].

h2. Notificações

A Godot tem um sistema de notificações. Isso geralmente não é necessário nos scripts, pois é bem baixo nível e funções virtuais são providas para a maioria dos casos. Mas é bom saber que elas existem. Basta adicionar uma função "@Object._notification()@":https://github.com/okamstudio/godot/wiki/class_object#_notification no seu código:

<pre><code class="python">
func _notification(what):
     if (what==NOTIFICATION_READY):
        print("Isto é o mesmo que sobrescrever a função _ready()...")
     elif (what==NOTIFICATION_PROCESS):     
        var delta = get_process_time()
        print("Isto é o mesmo que sobrescrever a função _process()...")
</code></pre>

A documentação para cada classe na "lista geral":https://github.com/okamstudio/godot/wiki/class_class_list mostra as notificações que elas podem receber. Contudo, mais uma vez, na maioria dos casos basta sobrescrever alguma função virtual.

h2. Sobrescrita de Funções

Como mencionado anteriormente, é melhor usar essas funções virtuais. Os nós provém uma gama de funções virtuais úteis que são descritas a seguir:

<pre><code class="python">
func _enter_tree():
	pass 
	# Quando o nó entra na Árvore da cena, ele se torna ativo 
	# e esta função é chamada. Os nós filhos ainda não 
	# entraram na cena ativa ainda. Em geral, é melhor usar 
	# _ready na maioria dos casos.
	

func _ready():
	pass
	# Esta função é chamada depois de _enter_tree, mas garante
	# que todos os nós filhos também entraram na Árvore da 
	# Cena e se se tornaram ativo.
   
func _exit_tree():
	pass
	# Quando o nó sai na Árvore da Cena, esta função é chamada.
	# Os nós filhos já saíram da Árvore nesse ponto e se
	# tornaram inativos.
   
func _process(delta):
	pass
	# Quando set_process() é habilitada, esta função é chamada
	# em todos os frames.

func _fixed_process(delta):
	pass
	# Quando set_fixed_process() é habilitada, esta função é 
	# chamada em todos os frames da física.
   
func _paused():
   pass 
   # Chamada quando o jogo é pausado. Depois desta chamada,
   # o nó não receberá mais nenhum callback de processamento.
   
func _unpaused():
	pass
	# Chamada quando o jogo é despausado.
</code></pre>

h2. Criando nós

Para criar um nó, basta chamar o método @.new()@ (como para qualquer outro tipo baseado em classe). Exemplo:

<pre><code class="python">
var s
func _ready():
	s = Sprite.new() # cria um novo sprite!
	add_child(s) # adiciona o sprite como filho deste nó
</code></pre>

Para excluir um nó, seja dentro ou fora da cena, @free()@ deve ser usada:

<pre><code class="python">
func _someaction():
   s.free() # remove o nó da cena o libera da memória imediatamente
</code></pre>

Quando um nó é excluído, ele também libera todos os seus nós filhos. Por causa disso, deletar nós manualmente é muito mais simples do que parece. Basta apenas excluir o nó e tudo em sua sub-árvore vai junto come ele.

Contudo, frequentemente você pode querer excluir um nó que está atualmente *bloqueado* (o nó está emitindo um sinal ou chamando uma função. Isso irá resultar num fechamento inesperado do jogo. Rodar Godot no depurador frequentemente irá capturar este caso e te avisar.

A maneira mais segura de deletar um nó é usando "@queue_free()@":https://github.com/okamstudio/godot/wiki/class_node#queue_free. Essa função apaga o nó durante o período inativo com segurança.

<pre><code class="python">
func _someaction():
   s.queue_free() # remove o nó quando nada estiver acontecendo
</code></pre>

h2. Instanciando Cenas

Instanciar cenas via código é bem fácil e feito em dois passos. O primeiro é carregar a cena do disco:

<pre><code class="python">
var scene = load("res://myscene.scn") # será carregada quando o script for instanciado
</code></pre>

Pré-carregar pode ser mais conveniente em alguns casos, pois ocorre no momento da interpretação:

<pre><code class="python">
var scene = preload("res://myscene.scn") # será carregada quando o script for interpretado.
</code></pre>

Mas @scene@ ainda não é um nó que contem subnós. Está empacotado em um recurso especial chamado de "*PackedScene*":https://github.com/okamstudio/godot/wiki/class_packedscene. Para criar um nó propriamente dito, a função "@PackedScene.instance()@":https://github.com/okamstudio/godot/wiki/class_packedscene#instance deve ser chamada. Esta irá retornar uma árvore de nós que pode ser adicionada à cena ativa:

<pre><code class="python">
var node = scene.instance()
add_child(node)
</code></pre>

A vantagem desse processo em duas etapas é que uma cena empacotada pode ser mantida carregada e pronta para ser usada, assim ela pode ser usada para criar quantas instâncias forem desejadas. Isso é bem útil, por exemplo, para instanciar diversos inimigos ou balas rapidamente na cena ativa.

_(c) Juan Linietsky, Ariel Manzur, distribuído segundo os termos da licença "CC By":https://creativecommons.org/licenses/by/3.0/legalcode ._

_Traduzido por George Marques. Tradução distribuída sob a licença "CC By-SA":https://creativecommons.org/licenses/by-sa/4.0/legalcode ._
