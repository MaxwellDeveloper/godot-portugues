h1. Mapeamento de Sombras (_Shadow Mapping_)

h2. Introdução

Apenas jogar a luz não é o suficiente para tornar uma cena em algo realista. Em teoria sim, mas da forma que as placas de vídeo funcionam, partes dos objetos que não deveriam ser atingidos pela luz continuam claro da mesma forma. A maior parte das pessoas, incluindo os artistas, vê as sombras como algo projetado pela luz, como se fossem criadas pela própria luz escurecendo os lugares escondidos da lâmpada.

Isso não é correto e é importante que seja entendido que as sombras são colocadas em lugares onde a luz não bate. É uma regra (quando não há luz indireta) se a luz é apagada, os lugares onde as sombras eram projetadas continuam com a mesma aparência. A sombra não pode ser vista como algo *adicionado* a cena, tem de ser visto como algo que *continua escuro*.

Todos os tipos de luz na Godot podem usar mapeamento de sombra e todos eles possuem suporte para diferentes técnicas de otimização e qualidade. Mapeamento de sombra usa uma textura que armazena a "profundidade" da luz e checa isso em tempo real para cada pixel do jogo.

Quanto maior a resolução da sombra, mais detalhes ela pode ter, porém mais memória e banda de vídeo ela vai consumir, podendo derrubar o frame-rate do jogo.

h2. Sombras por tipo de luz

h3. Sombra de Luz Direcional (Directional Light Shadows)

Luzes direcionais podem alcançar uma área realmente grande. Quanto maior a cena, maior a área afetada por ela. Dado o tamanho do mapa de sombra continuar o mesmo, a mesma quantidade de pixels de sombra serão usados em uma área grande, resultando em sombras quadriculadas. Várias técnicas existem para tratar desses problemas, mas a mais comum é a PSSM (do inglês _Parallel Split Shadow Maps_).

p=. !http://godotengine.org/attachments/201/download!

Essa técnica consiste em dividir a vista em 2 ou 4 seções e as sombras são renderizadas para cada uma. Dessa forma, objetos próximos podem ter uma sombra maior, enquanto objetos mais distantes usarão menos detalhes, mas em proporção isso parece fazer o tamanho do mapa de sombra aumentar enquanto, na verdade, permanece do mesmo tamanho. Certo, essa técnica não é gratuita, quanto mais você cortar a sombra, mais o desempenho vai cair. Nos celulares é conveniente não usar mais que 2 divisões.

Uma alternativa a essa técnica é a PSM (Sombras em Perspectiva, do inglês _Perspective Shadow Mapping_). Essa técnica é muito mais barata que a PSSM (tão quanto a ortogonal), mas ela só funciona em alguns ângulos da câmera. Em outras palavras a PSM só funciona bem se a câmera e a luz estiverem fixas e a luz não for paralela a câmera (quando isso acontece a PSM quebra completamente).

h3. Sombra de Luz Pontual (_Omni Light Shadows_)

Luzes pontuais sempre são problemáticas. Como representar uma sombra com 360 graus usando apenas uma textura? Há duas alternativas, a primeira é usar o DPSM (do inglês _Dual Paraboloid Shadow Mapping_). Essa técnica é rápida, mas necessita de um descarte para ser usada, o que torna em algo não muito usável nos celulares. DPSM pode não ficar muito bonito se a geometria não estiver tesselada o suficiente, então pode surgir a necessidade de mais vértices se ela não parecer correta. A segunda opção é não usar o mapa de sombras e usar um mapa cúbico de sombras (do inglês _Shadow Cubemap_). Isso é rápido, mas requer seis passes para renderizar todas as direções e não é suportado no GLES2.

p=. !http://godotengine.org/attachments/208/download!

Algumas considerações a quem vai usar o DPSM:

* Mantenha a _Slope-Scale_ em 0.
* Use valores pequenos para o _Z-Offset_, se parecer errado, use um valor menor.
* O filtro ESM pode melhorar o visual.
* Geralmente as pessoas notam o corte das duas metades do mapa de sombra, então rotacione para mostrar menos.

h3. Sombras das Luzes em Área (_Spot Light Shadows_)

Sombras de áreas geralmente são as mais simples, precisando apenas de uma única textura, sem técnicas especiais.

h2. Parametros das sombras

O fato das sombras serem texturas podem causar diversos problemas. O mais comum é a guerra de Z (linhas nas bordas dos objetos que podem projetar sombras). Há duas formas de resolver isso: a primeira é um ajuste fino no parâmetro do offset, a segunda é usando uma algorítimo de filtragem das sombras, ele tem um visual muito melhor e possui menos erros, mas consome mais da GPU.

h3. Ajustando o Z-Offset

Então você decidiu usar as sombras sem filtro, seja porque elas são mais rápidas, por você querer mais detalhes ou simplesmente você gosta desses detalhes sexy de serrote que as sombras geram, porque você se lembra dos seus jogos favoritos da geração anterior. Isso pode ser um pouco doloroso, mas na maioria das vezes isso pode ser resolvido para obter bons resultados. Não há um número mágico e os resultados podem reagir de forma diferente de cena para cena, mas isso só requer alguns ajustes. Vamos seguir passo a passo.

Primeiro passo, ligue as sombras e ajuste o Z-Offset e o Z-Slope-Scale para 0. Você será recebido por isso:

p=. !http://godotengine.org/attachments/203/download!

Uma porcaria, as sombras estão por todo lado e extremamente ruins! Isso acontece porque os polígonos que projetam as sombras estão recebendo elas, isso também é chamado de (_Self-shadowing_). Para se livrar dessa guerra, você tem que fazer a geometria e a sombra ficarem em paz, então você empurra a sombra mais para trás usando o Z-Offset. Isso melhora muito:

p=. !http://godotengine.org/attachments/204/download!

Mas isso não é perfeito, o _self-shadowing_ não sumiu completamente. Muito perto da perfeição, mas não é perfeito… Então em um passo de ganância você aumenta o Z-Offset um pouco mais!

p=. !http://godotengine.org/attachments/205/download!

Então você conseguiu acabar com o _self-shadowing_! Parabéns! Exceto por algo de errado… Certo!? Você empurrou a sombra muito para trás e ela está se desconectando com o objeto que a produz, ficou incrivelmente horrível. Certo, então você volta para o ultimo Z-Offset.
Essa é a hora que o Z-Slope-Scale vem para salvar o dia. Isso faz com que os objetos que produzem as sombras fiquem mais finos, então eles não recebem as sombras.

p=. !http://godotengine.org/attachments/206/download!

Ah! Finalmente algo aceitável. É perfeitamente aceitável e você sempre sonhou com um jogo assim (imagine que você está vendo uma arte nível Final Fantasy, não essa péssima tentativa de modelagem 3D). Ainda há alguns pixels perdidos pelo _self-shadowing_, ninguém se importa, mas sua ganância inesgotável faz você aumentar muito o Z-Slope-Scale:

p=.!http://godotengine.org/attachments/207/download!

Pois bem, há muitas sombras projetadas e finas, você tentou diminuir, mas não fica mais com uma boa aparência. Talvez a melhor opção seja voltar a ultima configuração e aceitar que perfeição não existe e seguir adiante.

h3. Importante!

Se você estiver usando as sombras em lâmpadas direcionais, tenha certeza que a +distância de visão+ da +câmera+ esteja ajustada corretamente. Se a distância entre sua câmera e o objeto for 100, aumente o alcance da câmera para esse valor. Se você usar um valor acima disso, o mapa de sombras vai perder detalhes para tentar cobrir a grande área. Então tenha certeza que você está ajustando corretamente!

h3. Filtros de sombra (Shadow Filtering)

Sombras cruas são pixelizadas. Aumentar a resolução apenas fará elas diminuírem de tamanho, mas continuarão pixelizadas.

A Godot oferece uma certa quantidade de filtros (as sombras do exemplo estão em baixa resolução de propósito!).

p=. !http://godotengine.org/attachments/202/download!

PCF5 e PCF13 são filtros mais simples para a textura. Farão as texturas algo aceitável, mas precisam de uma boa resolução para ficar bonito.

ESM é um filtro mais complexo e possui mais parâmetros. ESM usa o filtro _blur_ ou _desfoque_ (a quantidade de vezes que o filtro passa e a quantidade de cor que é espalhada podem ser ajustadas).

_Juan Linietsky, Ariel Manzur, distribuído segundo os termos da licença "CC By":https://creativecommons.org/licenses/by/3.0/legalcode ._

_Traduzido por Cairé. Revisado por George Marques. Tradução distribuída sob a licença "CC By-SA":https://creativecommons.org/licenses/by-sa/4.0/legalcode ._
